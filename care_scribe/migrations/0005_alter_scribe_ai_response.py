# Generated by Django 5.1.4 on 2025-06-05 08:52

import json
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("care_scribe", "0004_scribe_meta_scribe_requested_in_encounter"),
    ]

    def migrate_ai_responses(apps, schema_editor):
        Scribe = apps.get_model("care_scribe", "Scribe")
        for scribe in Scribe.objects.all():
            if isinstance(scribe.ai_response, str):
                try:
                    scribe.ai_response = json.loads(scribe.ai_response)
                    for key, value in scribe.ai_response.items():
                        if isinstance(value, str):
                            try:
                                scribe.ai_response[key] = json.loads(value)
                            except json.JSONDecodeError:
                                # If the value is not a valid JSON, keep it as is
                                pass
                except json.JSONDecodeError:
                    scribe.ai_response = {}
            elif not isinstance(scribe.ai_response, dict):
                scribe.ai_response = {}

            # convert fields to be nested inside a questionnaire
            if len(scribe.form_data) > 0 and scribe.form_data[0].get("friendlyName", None) is not None:
                scribe.form_data = [{"title": "Form", "description": "", "fields": scribe.form_data}]

            if scribe.meta is not None and isinstance(scribe.meta, dict):
                scribe.meta = {
                    "provider": scribe.meta.get("provider", ""),
                    "chat_model": scribe.meta.get("chat_model", ""),
                    "audio_model": scribe.meta.get("audio_model", ""),
                    "iterations": [
                        {
                            "function": scribe.meta.get("function", ""),
                            "prompt": scribe.meta.get("prompt", ""),
                            "completion_id": scribe.meta.get("completion_id", ""),
                            "completion_input_tokens": scribe.meta.get("completion_input_tokens", 0),
                            "completion_output_tokens": scribe.meta.get("completion_output_tokens", 0),
                            "completion_time": scribe.meta.get("completion_time", 0),
                            "transcription_time": scribe.meta.get("transcription_time", 0),
                        }
                    ],
                    "error": scribe.meta.get("error", ""),
                }
            scribe.save()

    def reverse_migrate_ai_responses(apps, schema_editor):
        Scribe = apps.get_model("care_scribe", "Scribe")
        for scribe in Scribe.objects.all():
            if isinstance(scribe.ai_response, dict):
                try:
                    scribe.ai_response = json.dumps(scribe.ai_response)
                except (TypeError, ValueError):
                    scribe.ai_response = ""
            else:
                scribe.ai_response = ""
            scribe.save()

    operations = [
        migrations.AlterField(
            model_name="scribe",
            name="ai_response",
            field=models.JSONField(blank=True, default=dict, null=True),
        ),
        migrations.RunPython(migrate_ai_responses, reverse_code=reverse_migrate_ai_responses),
    ]
